

#include <stack>

#include "Parser.h"


// Shift ==============================
const Byte s1  [] = { 's',   1 };
const Byte s2  [] = { 's',   2 };
const Byte s3  [] = { 's',   3 };
const Byte s4  [] = { 's',   4 };
const Byte s5  [] = { 's',   5 };
const Byte s6  [] = { 's',   6 };
const Byte s7  [] = { 's',   7 };
const Byte s8  [] = { 's',   8 };
const Byte s9  [] = { 's',   9 };
const Byte s10 [] = { 's',  10 };
const Byte s11 [] = { 's',  11 };
const Byte s12 [] = { 's',  12 };
const Byte s13 [] = { 's',  13 };
const Byte s14 [] = { 's',  14 };
const Byte s15 [] = { 's',  15 };
const Byte s16 [] = { 's',  16 };
const Byte s17 [] = { 's',  17 };
const Byte s18 [] = { 's',  18 };
const Byte s19 [] = { 's',  19 };
const Byte s20 [] = { 's',  20 };
const Byte s21 [] = { 's',  21 };
const Byte s22 [] = { 's',  22 };
const Byte s23 [] = { 's',  23 };
const Byte s24 [] = { 's',  24 };
const Byte s25 [] = { 's',  25 };
const Byte s26 [] = { 's',  26 };
const Byte s27 [] = { 's',  27 };
const Byte s28 [] = { 's',  28 };
const Byte s29 [] = { 's',  29 };
const Byte s30 [] = { 's',  30 };
const Byte s31 [] = { 's',  31 };
const Byte s32 [] = { 's',  32 };
const Byte s33 [] = { 's',  33 };
const Byte s34 [] = { 's',  34 };
const Byte s35 [] = { 's',  35 };
const Byte s36 [] = { 's',  36 };
const Byte s37 [] = { 's',  37 };
const Byte s38 [] = { 's',  38 };
const Byte s39 [] = { 's',  39 };
const Byte s40 [] = { 's',  40 };
const Byte s41 [] = { 's',  41 };
const Byte s42 [] = { 's',  42 };
const Byte s43 [] = { 's',  43 };
const Byte s44 [] = { 's',  44 };
const Byte s45 [] = { 's',  45 };
const Byte s46 [] = { 's',  46 };
const Byte s47 [] = { 's',  47 };
const Byte s48 [] = { 's',  48 };
const Byte s49 [] = { 's',  49 };
const Byte s50 [] = { 's',  50 };
const Byte s51 [] = { 's',  51 };
const Byte s52 [] = { 's',  52 };
const Byte s53 [] = { 's',  53 };
const Byte s54 [] = { 's',  54 };
const Byte s55 [] = { 's',  55 };
const Byte s56 [] = { 's',  56 };
const Byte s57 [] = { 's',  57 };
const Byte s58 [] = { 's',  58 };
const Byte s59 [] = { 's',  59 };
const Byte s60 [] = { 's',  60 };
const Byte s61 [] = { 's',  61 };
const Byte s62 [] = { 's',  62 };
const Byte s63 [] = { 's',  63 };
const Byte s64 [] = { 's',  64 };
const Byte s65 [] = { 's',  65 };
const Byte s66 [] = { 's',  66 };
const Byte s67 [] = { 's',  67 };
const Byte s68 [] = { 's',  68 };
const Byte s69 [] = { 's',  69 };
const Byte s70 [] = { 's',  70 };
const Byte s71 [] = { 's',  71 };
const Byte s72 [] = { 's',  72 };
const Byte s73 [] = { 's',  73 };
const Byte s74 [] = { 's',  74 };
const Byte s75 [] = { 's',  75 };
const Byte s76 [] = { 's',  76 };
const Byte s77 [] = { 's',  77 };
const Byte s78 [] = { 's',  78 };
const Byte s79 [] = { 's',  79 };
const Byte s80 [] = { 's',  80 };
const Byte s81 [] = { 's',  81 };
const Byte s82 [] = { 's',  82 };
const Byte s83 [] = { 's',  83 };
const Byte s84 [] = { 's',  84 };
const Byte s85 [] = { 's',  85 };
const Byte s86 [] = { 's',  86 };
const Byte s87 [] = { 's',  87 };
const Byte s88 [] = { 's',  88 };
const Byte s89 [] = { 's',  89 };
const Byte s90 [] = { 's',  90 };
const Byte s91 [] = { 's',  91 };
const Byte s92 [] = { 's',  92 };
const Byte s93 [] = { 's',  93 };
const Byte s94 [] = { 's',  94 };
const Byte s95 [] = { 's',  95 };
const Byte s96 [] = { 's',  96 };
const Byte s97 [] = { 's',  97 };
const Byte s98 [] = { 's',  98 };
const Byte s99 [] = { 's',  99 };
const Byte s100[] = { 's', 100 };
const Byte s101[] = { 's', 101 };
const Byte s102[] = { 's', 102 };
const Byte s103[] = { 's', 103 };
const Byte s104[] = { 's', 104 };
const Byte s105[] = { 's', 105 };
const Byte s106[] = { 's', 106 };
const Byte s107[] = { 's', 107 };
const Byte s108[] = { 's', 108 };
const Byte s109[] = { 's', 109 };
const Byte s110[] = { 's', 110 };
const Byte s111[] = { 's', 111 };
const Byte s112[] = { 's', 112 };
const Byte s113[] = { 's', 113 };
const Byte s114[] = { 's', 114 };
const Byte s115[] = { 's', 115 };
const Byte s116[] = { 's', 116 };
const Byte s117[] = { 's', 117 };
const Byte s118[] = { 's', 118 };
const Byte s119[] = { 's', 119 };
const Byte s120[] = { 's', 120 };
const Byte s121[] = { 's', 121 };
const Byte s122[] = { 's', 122 };
const Byte s123[] = { 's', 123 };
const Byte s124[] = { 's', 124 };
const Byte s125[] = { 's', 125 };
const Byte s126[] = { 's', 126 };
const Byte s127[] = { 's', 127 };
const Byte s128[] = { 's', 128 };
const Byte s129[] = { 's', 129 };
const Byte s130[] = { 's', 130 };
const Byte s131[] = { 's', 131 };
const Byte s132[] = { 's', 132 };
const Byte s133[] = { 's', 133 };
const Byte s134[] = { 's', 134 };
const Byte s135[] = { 's', 135 };
const Byte s136[] = { 's', 136 };
const Byte s137[] = { 's', 137 };
const Byte s138[] = { 's', 138 };
const Byte s139[] = { 's', 139 };
const Byte s140[] = { 's', 140 };
const Byte s141[] = { 's', 141 };
const Byte s142[] = { 's', 142 };
const Byte s143[] = { 's', 143 };
const Byte s144[] = { 's', 144 };

// Reduce =============================
const Byte r1  [] = { 'r',   1 };
const Byte r2  [] = { 'r',   2 };
const Byte r3  [] = { 'r',   3 };
const Byte r4  [] = { 'r',   4 };
const Byte r5  [] = { 'r',   5 };
const Byte r6  [] = { 'r',   6 };
const Byte r7  [] = { 'r',   7 };
const Byte r8  [] = { 'r',   8 };
const Byte r9  [] = { 'r',   9 };
const Byte r10 [] = { 'r',  10 };
const Byte r11 [] = { 'r',  11 };
const Byte r12 [] = { 'r',  12 };
const Byte r13 [] = { 'r',  13 };
const Byte r14 [] = { 'r',  14 };
const Byte r15 [] = { 'r',  15 };
const Byte r16 [] = { 'r',  16 };
const Byte r17 [] = { 'r',  17 };
const Byte r18 [] = { 'r',  18 };
const Byte r19 [] = { 'r',  19 };
const Byte r20 [] = { 'r',  20 };
const Byte r21 [] = { 'r',  21 };
const Byte r22 [] = { 'r',  22 };
const Byte r23 [] = { 'r',  23 };
const Byte r24 [] = { 'r',  24 };
const Byte r25 [] = { 'r',  25 };
const Byte r26 [] = { 'r',  26 };
const Byte r27 [] = { 'r',  27 };
const Byte r28 [] = { 'r',  28 };
const Byte r29 [] = { 'r',  29 };
const Byte r30 [] = { 'r',  30 };
const Byte r31 [] = { 'r',  31 };
const Byte r32 [] = { 'r',  32 };
const Byte r33 [] = { 'r',  33 };
const Byte r34 [] = { 'r',  34 };
const Byte r35 [] = { 'r',  35 };
const Byte r36 [] = { 'r',  36 };
const Byte r37 [] = { 'r',  37 };
const Byte r38 [] = { 'r',  38 };
const Byte r39 [] = { 'r',  39 };
const Byte r40 [] = { 'r',  40 };
const Byte r41 [] = { 'r',  41 };
const Byte r42 [] = { 'r',  42 };
const Byte r43 [] = { 'r',  43 };
const Byte r44 [] = { 'r',  44 };
const Byte r45 [] = { 'r',  45 };
const Byte r46 [] = { 'r',  46 };
const Byte r47 [] = { 'r',  47 };
const Byte r48 [] = { 'r',  48 };
const Byte r49 [] = { 'r',  49 };
const Byte r50 [] = { 'r',  50 };
const Byte r51 [] = { 'r',  51 };
const Byte r52 [] = { 'r',  52 };
const Byte r53 [] = { 'r',  53 };
const Byte r54 [] = { 'r',  54 };
const Byte r55 [] = { 'r',  55 };
const Byte r56 [] = { 'r',  56 };
const Byte r57 [] = { 'r',  57 };
const Byte r58 [] = { 'r',  58 };
const Byte r59 [] = { 'r',  59 };
const Byte r60 [] = { 'r',  60 };
const Byte r61 [] = { 'r',  61 };
const Byte r62 [] = { 'r',  62 };
const Byte r63 [] = { 'r',  63 };
const Byte r64 [] = { 'r',  64 };
const Byte r65 [] = { 'r',  65 };
const Byte r66 [] = { 'r',  66 };
const Byte r67 [] = { 'r',  67 };
const Byte r68 [] = { 'r',  68 };
const Byte r69 [] = { 'r',  69 };
const Byte r70 [] = { 'r',  70 };
const Byte r71 [] = { 'r',  71 };
const Byte r72 [] = { 'r',  72 };
const Byte r73 [] = { 'r',  73 };
const Byte r74 [] = { 'r',  74 };
const Byte r75 [] = { 'r',  75 };
const Byte r76 [] = { 'r',  76 };
const Byte r77 [] = { 'r',  77 };
const Byte r78 [] = { 'r',  78 };
const Byte r79 [] = { 'r',  79 };
const Byte r80 [] = { 'r',  80 };
const Byte r81 [] = { 'r',  81 };
const Byte r82 [] = { 'r',  82 };
const Byte r83 [] = { 'r',  83 };
const Byte r84 [] = { 'r',  84 };
const Byte r85 [] = { 'r',  85 };
const Byte r86 [] = { 'r',  86 };
const Byte r87 [] = { 'r',  87 };
const Byte r88 [] = { 'r',  88 };
const Byte r89 [] = { 'r',  89 };
const Byte r90 [] = { 'r',  90 };
const Byte r91 [] = { 'r',  91 };
const Byte r92 [] = { 'r',  92 };
const Byte r93 [] = { 'r',  93 };
const Byte r94 [] = { 'r',  94 };
const Byte r95 [] = { 'r',  95 };
const Byte r96 [] = { 'r',  96 };
const Byte r97 [] = { 'r',  97 };
const Byte r98 [] = { 'r',  98 };
const Byte r99 [] = { 'r',  99 };
const Byte r100[] = { 'r', 100 };
const Byte r101[] = { 'r', 101 };
const Byte r102[] = { 'r', 102 };
const Byte r103[] = { 'r', 103 };
const Byte r104[] = { 'r', 104 };
const Byte r105[] = { 'r', 105 };
const Byte r106[] = { 'r', 106 };
const Byte r107[] = { 'r', 107 };
const Byte r108[] = { 'r', 108 };
const Byte r109[] = { 'r', 109 };
const Byte r110[] = { 'r', 110 };
const Byte r111[] = { 'r', 111 };
const Byte r112[] = { 'r', 112 };
const Byte r113[] = { 'r', 113 };
const Byte r114[] = { 'r', 114 };
const Byte r115[] = { 'r', 115 };
const Byte r116[] = { 'r', 116 };
const Byte r117[] = { 'r', 117 };
const Byte r118[] = { 'r', 118 };
const Byte r119[] = { 'r', 119 };
const Byte r120[] = { 'r', 120 };
const Byte r121[] = { 'r', 121 };
const Byte r122[] = { 'r', 122 };
const Byte r123[] = { 'r', 123 };
const Byte r124[] = { 'r', 124 };
const Byte r125[] = { 'r', 125 };
const Byte r126[] = { 'r', 126 };
const Byte r127[] = { 'r', 127 };
const Byte r128[] = { 'r', 128 };
const Byte r129[] = { 'r', 129 };
const Byte r130[] = { 'r', 130 };
const Byte r131[] = { 'r', 131 };
const Byte r132[] = { 'r', 132 };
const Byte r133[] = { 'r', 133 };
const Byte r134[] = { 'r', 134 };
const Byte r135[] = { 'r', 135 };
const Byte r136[] = { 'r', 136 };
const Byte r137[] = { 'r', 137 };
const Byte r138[] = { 'r', 138 };
const Byte r139[] = { 'r', 139 };
const Byte r140[] = { 'r', 140 };
const Byte r141[] = { 'r', 141 };
const Byte r142[] = { 'r', 142 };
const Byte r143[] = { 'r', 143 };
const Byte r144[] = { 'r', 144 };

// goto ===============================
const Byte g1  [] = { 'g',   1 };
const Byte g2  [] = { 'g',   2 };
const Byte g3  [] = { 'g',   3 };
const Byte g4  [] = { 'g',   4 };
const Byte g5  [] = { 'g',   5 };
const Byte g6  [] = { 'g',   6 };
const Byte g7  [] = { 'g',   7 };
const Byte g8  [] = { 'g',   8 };
const Byte g9  [] = { 'g',   9 };
const Byte g10 [] = { 'g',  10 };
const Byte g11 [] = { 'g',  11 };
const Byte g12 [] = { 'g',  12 };
const Byte g13 [] = { 'g',  13 };
const Byte g14 [] = { 'g',  14 };
const Byte g15 [] = { 'g',  15 };
const Byte g16 [] = { 'g',  16 };
const Byte g17 [] = { 'g',  17 };
const Byte g18 [] = { 'g',  18 };
const Byte g19 [] = { 'g',  19 };
const Byte g20 [] = { 'g',  20 };
const Byte g21 [] = { 'g',  21 };
const Byte g22 [] = { 'g',  22 };
const Byte g23 [] = { 'g',  23 };
const Byte g24 [] = { 'g',  24 };
const Byte g25 [] = { 'g',  25 };
const Byte g26 [] = { 'g',  26 };
const Byte g27 [] = { 'g',  27 };
const Byte g28 [] = { 'g',  28 };
const Byte g29 [] = { 'g',  29 };
const Byte g30 [] = { 'g',  30 };
const Byte g31 [] = { 'g',  31 };
const Byte g32 [] = { 'g',  32 };
const Byte g33 [] = { 'g',  33 };
const Byte g34 [] = { 'g',  34 };
const Byte g35 [] = { 'g',  35 };
const Byte g36 [] = { 'g',  36 };
const Byte g37 [] = { 'g',  37 };
const Byte g38 [] = { 'g',  38 };
const Byte g39 [] = { 'g',  39 };
const Byte g40 [] = { 'g',  40 };
const Byte g41 [] = { 'g',  41 };
const Byte g42 [] = { 'g',  42 };
const Byte g43 [] = { 'g',  43 };
const Byte g44 [] = { 'g',  44 };
const Byte g45 [] = { 'g',  45 };
const Byte g46 [] = { 'g',  46 };
const Byte g47 [] = { 'g',  47 };
const Byte g48 [] = { 'g',  48 };
const Byte g49 [] = { 'g',  49 };
const Byte g50 [] = { 'g',  50 };
const Byte g51 [] = { 'g',  51 };
const Byte g52 [] = { 'g',  52 };
const Byte g53 [] = { 'g',  53 };
const Byte g54 [] = { 'g',  54 };
const Byte g55 [] = { 'g',  55 };
const Byte g56 [] = { 'g',  56 };
const Byte g57 [] = { 'g',  57 };
const Byte g58 [] = { 'g',  58 };
const Byte g59 [] = { 'g',  59 };
const Byte g60 [] = { 'g',  60 };
const Byte g61 [] = { 'g',  61 };
const Byte g62 [] = { 'g',  62 };
const Byte g63 [] = { 'g',  63 };
const Byte g64 [] = { 'g',  64 };
const Byte g65 [] = { 'g',  65 };
const Byte g66 [] = { 'g',  66 };
const Byte g67 [] = { 'g',  67 };
const Byte g68 [] = { 'g',  68 };
const Byte g69 [] = { 'g',  69 };
const Byte g70 [] = { 'g',  70 };
const Byte g71 [] = { 'g',  71 };
const Byte g72 [] = { 'g',  72 };
const Byte g73 [] = { 'g',  73 };
const Byte g74 [] = { 'g',  74 };
const Byte g75 [] = { 'g',  75 };
const Byte g76 [] = { 'g',  76 };
const Byte g77 [] = { 'g',  77 };
const Byte g78 [] = { 'g',  78 };
const Byte g79 [] = { 'g',  79 };
const Byte g80 [] = { 'g',  80 };
const Byte g81 [] = { 'g',  81 };
const Byte g82 [] = { 'g',  82 };
const Byte g83 [] = { 'g',  83 };
const Byte g84 [] = { 'g',  84 };
const Byte g85 [] = { 'g',  85 };
const Byte g86 [] = { 'g',  86 };
const Byte g87 [] = { 'g',  87 };
const Byte g88 [] = { 'g',  88 };
const Byte g89 [] = { 'g',  89 };
const Byte g90 [] = { 'g',  90 };
const Byte g91 [] = { 'g',  91 };
const Byte g92 [] = { 'g',  92 };
const Byte g93 [] = { 'g',  93 };
const Byte g94 [] = { 'g',  94 };
const Byte g95 [] = { 'g',  95 };
const Byte g96 [] = { 'g',  96 };
const Byte g97 [] = { 'g',  97 };
const Byte g98 [] = { 'g',  98 };
const Byte g99 [] = { 'g',  99 };
const Byte g100[] = { 'g', 100 };
const Byte g101[] = { 'g', 101 };
const Byte g102[] = { 'g', 102 };
const Byte g103[] = { 'g', 103 };
const Byte g104[] = { 'g', 104 };
const Byte g105[] = { 'g', 105 };
const Byte g106[] = { 'g', 106 };
const Byte g107[] = { 'g', 107 };
const Byte g108[] = { 'g', 108 };
const Byte g109[] = { 'g', 109 };
const Byte g110[] = { 'g', 110 };
const Byte g111[] = { 'g', 111 };
const Byte g112[] = { 'g', 112 };
const Byte g113[] = { 'g', 113 };
const Byte g114[] = { 'g', 114 };
const Byte g115[] = { 'g', 115 };
const Byte g116[] = { 'g', 116 };
const Byte g117[] = { 'g', 117 };
const Byte g118[] = { 'g', 118 };
const Byte g119[] = { 'g', 119 };
const Byte g120[] = { 'g', 120 };
const Byte g121[] = { 'g', 121 };
const Byte g122[] = { 'g', 122 };
const Byte g123[] = { 'g', 123 };
const Byte g124[] = { 'g', 124 };
const Byte g125[] = { 'g', 125 };
const Byte g126[] = { 'g', 126 };
const Byte g127[] = { 'g', 127 };
const Byte g128[] = { 'g', 128 };
const Byte g129[] = { 'g', 129 };
const Byte g130[] = { 'g', 130 };
const Byte g131[] = { 'g', 131 };
const Byte g132[] = { 'g', 132 };
const Byte g133[] = { 'g', 133 };
const Byte g134[] = { 'g', 134 };
const Byte g135[] = { 'g', 135 };
const Byte g136[] = { 'g', 136 };
const Byte g137[] = { 'g', 137 };
const Byte g138[] = { 'g', 138 };
const Byte g139[] = { 'g', 139 };
const Byte g140[] = { 'g', 140 };
const Byte g141[] = { 'g', 141 };
const Byte g142[] = { 'g', 142 };
const Byte g143[] = { 'g', 143 };
const Byte g144[] = { 'g', 144 };

// accept =============================
const Byte a0[] = { 'a', 0 };

BytePtr const Parser::parsing_table[ 145 ][ 74 ] =
{
//$end	Integer	NewLine	:	CLOSE	#	DATA	DIM	ID	(	)	END	FOR	=	TO	STEP	GOTO	GOSUB	IF	THEN	INPUT	,	LET	NEXT	OPEN	AS	POKE	PRINT	READ	RETURN	RESTORE	RUN	STOP	SYS	WAIT	Remark	OUTPUT	;	OR	AND	NOT	<>	><	>	>=	<	<=	+	-	*	/	^	String	Real	<Lines>	<Statements>	<Statement>	<Access>	<ID_List>	<Value_List>	<Constant_List>	<Integer_List>	<Expression_List>	<Print_List>	<Expression>	<And_Exp>	<Not_Exp>	<Compare_Exp>	<Add_Exp>	<Mult_Exp>	<Negate_Exp>	<Power_Exp>	<Value>	<Constant>
/*0*/   { 0,  s2,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*1*/   { a0, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*2*/   { 0,  0,    0,    0,    s5,   0,    s6,   s7,   0,    0,    0,    s8,   s9,   0,    0,    0,    s10,  s11,  s12,  0,    s13,  0,    s14,  s15,  s16,  0,    s17,  s18,  s19,  s20,  s21,  s22,  s23,  s24,  s25,  s26,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g3,   g4,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*3*/   { 0,  0,    s27,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*4*/   { 0,  0,    r4,   s28,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*5*/   { 0,  0,    0,    0,    0,    s29,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*6*/   { 0,  s32,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    g30,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g31   },
/*7*/   { 0,  0,    0,    0,    0,    0,    0,    0,    s35,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*8*/   { 0,  0,    r8,   r8,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*9*/   { 0,  0,    0,    0,    0,    0,    0,    0,    s36,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*10*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g37,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*11*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g51,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*12*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g52,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*13*/  { 0,  0,    0,    0,    0,    s53,  0,    0,    s55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g54,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*14*/  { 0,  0,    0,    0,    0,    0,    0,    0,    s56,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*15*/  { 0,  0,    0,    0,    0,    0,    0,    0,    s55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g57,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*16*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g58,  g50   },
/*17*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    g59,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g60,  g50   },
/*18*/  { 0,  s32,  0,    0,    0,    s61,  0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    g62,  g63,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*19*/  { 0,  0,    0,    0,    0,    0,    0,    0,    s55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g64,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*20*/  { 0,  0,    r23,  r23,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*21*/  { 0,  0,    r24,  r24,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*22*/  { 0,  0,    r25,  r25,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*23*/  { 0,  0,    r26,  r26,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*24*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g65,  g50   },
/*25*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    g66,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g60,  g50   },
/*26*/  { 0,  0,    r29,  r29,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*27*/  { r2, s2,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g67,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*28*/  { 0,  0,    0,    0,    s5,   0,    s6,   s7,   0,    0,    0,    s8,   s9,   0,    0,    0,    s10,  s11,  s12,  0,    s13,  0,    s14,  s15,  s16,  0,    s17,  s18,  s19,  s20,  s21,  s22,  s23,  s24,  s25,  s26,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g68,  g4,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*29*/  { 0,  s69,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*30*/  { 0,  0,    r6,   r6,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*31*/  { 0,  0,    r37,  r37,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s70,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*32*/  { 0,  0,    r72,  r72,  0,    0,    0,    0,    0,    0,    r72,  0,    r72,  r72,  r72,  r72,  0,    0,    0,    r72,  0,    r72,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r72,  r72,  r72,  0,    r72,  r72,  r72,  r72,  r72,  r72,  r72,  r72,  r72,  r72,  r72,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*33*/  { 0,  0,    r73,  r73,  0,    0,    0,    0,    0,    0,    r73,  0,    r73,  r73,  r73,  r73,  0,    0,    0,    r73,  0,    r73,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r73,  r73,  r73,  0,    r73,  r73,  r73,  r73,  r73,  r73,  r73,  r73,  r73,  r73,  r73,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*34*/  { 0,  0,    r74,  r74,  0,    0,    0,    0,    0,    0,    r74,  0,    r74,  r74,  r74,  r74,  0,    0,    0,    r74,  0,    r74,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r74,  r74,  r74,  0,    r74,  r74,  r74,  r74,  r74,  r74,  r74,  r74,  r74,  r74,  r74,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*35*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    s71,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*36*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s72,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*37*/  { 0,  0,    r11,  r11,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*38*/  { 0,  0,    r45,  r45,  0,    0,    0,    0,    0,    0,    r45,  0,    0,    0,    r45,  r45,  0,    0,    0,    r45,  0,    r45,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r45,  s73,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*39*/  { 0,  0,    r47,  r47,  0,    0,    0,    0,    0,    0,    r47,  0,    0,    0,    r47,  r47,  0,    0,    0,    r47,  0,    r47,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r47,  r47,  s74,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*40*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g75,  g42,  g43,  g44,  g46,  g47,  g50   },
/*41*/  { 0,  0,    r49,  r49,  0,    0,    0,    0,    0,    0,    r49,  0,    0,    0,    r49,  r49,  0,    0,    0,    r49,  0,    r49,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r49,  r49,  r49,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*42*/  { 0,  0,    r57,  r57,  0,    0,    0,    0,    0,    0,    r57,  0,    0,    s79,  r57,  r57,  0,    0,    0,    r57,  0,    r57,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r57,  r57,  r57,  0,    s78,  s81,  s80,  s82,  s76,  s77,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*43*/  { 0,  0,    r60,  r60,  0,    0,    0,    0,    0,    0,    r60,  0,    0,    r60,  r60,  r60,  0,    0,    0,    r60,  0,    r60,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r60,  r60,  r60,  0,    r60,  r60,  r60,  r60,  r60,  r60,  s83,  s84,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*44*/  { 0,  0,    r63,  r63,  0,    0,    0,    0,    0,    0,    r63,  0,    0,    r63,  r63,  r63,  0,    0,    0,    r63,  0,    r63,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r63,  r63,  r63,  0,    r63,  r63,  r63,  r63,  r63,  r63,  r63,  r63,  s85,  s86,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*45*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g87,  g47,  g50   },
/*46*/  { 0,  0,    r65,  r65,  0,    0,    0,    0,    0,    0,    r65,  0,    0,    r65,  r65,  r65,  0,    0,    0,    r65,  0,    r65,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r65,  r65,  r65,  0,    r65,  r65,  r65,  r65,  r65,  r65,  r65,  r65,  r65,  r65,  s88,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*47*/  { 0,  0,    r67,  r67,  0,    0,    0,    0,    0,    0,    r67,  0,    0,    r67,  r67,  r67,  0,    0,    0,    r67,  0,    r67,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r67,  r67,  r67,  0,    r67,  r67,  r67,  r67,  r67,  r67,  r67,  r67,  r67,  r67,  r67,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*48*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g89,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*49*/  { 0,  0,    r69,  r69,  0,    0,    0,    0,    0,    s90,  r69,  0,    r69,  r69,  r69,  r69,  0,    0,    0,    r69,  0,    r69,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r69,  r69,  r69,  0,    r69,  r69,  r69,  r69,  r69,  r69,  r69,  r69,  r69,  r69,  r69,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*50*/  { 0,  0,    r71,  r71,  0,    0,    0,    0,    0,    0,    r71,  0,    r71,  r71,  r71,  r71,  0,    0,    0,    r71,  0,    r71,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r71,  r71,  r71,  0,    r71,  r71,  r71,  r71,  r71,  r71,  r71,  r71,  r71,  r71,  r71,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*51*/  { 0,  0,    r12,  r12,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*52*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s91,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*53*/  { 0,  s92,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*54*/  { 0,  0,    r14,  r14,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*55*/  { 0,  0,    r33,  r33,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s93,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*56*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s94,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*57*/  { 0,  0,    r17,  r17,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*58*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s95,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*59*/  { 0,  0,    r19,  r19,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*60*/  { 0,  0,    r35,  r35,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s96,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*61*/  { 0,  s97,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*62*/  { 0,  0,    r20,  r20,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*63*/  { 0,  0,    r43,  r43,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s98,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*64*/  { 0,  0,    r22,  r22,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*65*/  { 0,  0,    r27,  r27,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*66*/  { 0,  0,    r28,  r28,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*67*/  { r1, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*68*/  { 0,  0,    r3,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*69*/  { 0,  0,    r5,   r5,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*70*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    g99,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g31   },
/*71*/  { 0,  s101, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g100, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*72*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g102, g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*73*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g103, g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*74*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g104, g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*75*/  { 0,  0,    r48,  r48,  0,    0,    0,    0,    0,    0,    r48,  0,    0,    0,    r48,  r48,  0,    0,    0,    r48,  0,    r48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r48,  r48,  r48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*76*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g105, g42,  g43,  g44,  g46,  g47,  g50   },
/*77*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g106, g42,  g43,  g44,  g46,  g47,  g50   },
/*78*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g107, g42,  g43,  g44,  g46,  g47,  g50   },
/*79*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g108, g42,  g43,  g44,  g46,  g47,  g50   },
/*80*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g109, g42,  g43,  g44,  g46,  g47,  g50   },
/*81*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g110, g42,  g43,  g44,  g46,  g47,  g50   },
/*82*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g111, g42,  g43,  g44,  g46,  g47,  g50   },
/*83*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g112, g43,  g44,  g46,  g47,  g50   },
/*84*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g113, g43,  g44,  g46,  g47,  g50   },
/*85*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g114, g44,  g46,  g47,  g50   },
/*86*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g115, g44,  g46,  g47,  g50   },
/*87*/  { 0,  0,    r64,  r64,  0,    0,    0,    0,    0,    0,    r64,  0,    0,    r64,  r64,  r64,  0,    0,    0,    r64,  0,    r64,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r64,  r64,  r64,  0,    r64,  r64,  r64,  r64,  r64,  r64,  r64,  r64,  r64,  r64,  s88,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*88*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g116, g50   },
/*89*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    s117, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*90*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    g118, 0,    g119, g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*91*/  { 0,  0,    0,    0,    s5,   0,    s6,   s7,   0,    0,    0,    s8,   s9,   0,    0,    0,    s10,  s11,  s12,  0,    s13,  0,    s14,  s15,  s16,  0,    s17,  s18,  s19,  s20,  s21,  s22,  s23,  s24,  s25,  s26,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g120, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*92*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s121, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*93*/  { 0,  0,    0,    0,    0,    0,    0,    0,    s55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g122, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*94*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g123, g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*95*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s125, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s126, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g124, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*96*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    g127, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g60,  g50   },
/*97*/  { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s128, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*98*/  { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    g129, g63,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*99*/  { 0,  0,    r36,  r36,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*100*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    s130, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*101*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    r39,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s131, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*102*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s132, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*103*/ { 0,  0,    r44,  r44,  0,    0,    0,    0,    0,    0,    r44,  0,    0,    0,    r44,  r44,  0,    0,    0,    r44,  0,    r44,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r44,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*104*/ { 0,  0,    r46,  r46,  0,    0,    0,    0,    0,    0,    r46,  0,    0,    0,    r46,  r46,  0,    0,    0,    r46,  0,    r46,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r46,  r46,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*105*/ { 0,  0,    r55,  r55,  0,    0,    0,    0,    0,    0,    r55,  0,    0,    0,    r55,  r55,  0,    0,    0,    r55,  0,    r55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r55,  r55,  r55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*106*/ { 0,  0,    r56,  r56,  0,    0,    0,    0,    0,    0,    r56,  0,    0,    0,    r56,  r56,  0,    0,    0,    r56,  0,    r56,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r56,  r56,  r56,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*107*/ { 0,  0,    r51,  r51,  0,    0,    0,    0,    0,    0,    r51,  0,    0,    0,    r51,  r51,  0,    0,    0,    r51,  0,    r51,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r51,  r51,  r51,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*108*/ { 0,  0,    r50,  r50,  0,    0,    0,    0,    0,    0,    r50,  0,    0,    0,    r50,  r50,  0,    0,    0,    r50,  0,    r50,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r50,  r50,  r50,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*109*/ { 0,  0,    r53,  r53,  0,    0,    0,    0,    0,    0,    r53,  0,    0,    0,    r53,  r53,  0,    0,    0,    r53,  0,    r53,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r53,  r53,  r53,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*110*/ { 0,  0,    r52,  r52,  0,    0,    0,    0,    0,    0,    r52,  0,    0,    0,    r52,  r52,  0,    0,    0,    r52,  0,    r52,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r52,  r52,  r52,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*111*/ { 0,  0,    r54,  r54,  0,    0,    0,    0,    0,    0,    r54,  0,    0,    0,    r54,  r54,  0,    0,    0,    r54,  0,    r54,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r54,  r54,  r54,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*112*/ { 0,  0,    r58,  r58,  0,    0,    0,    0,    0,    0,    r58,  0,    0,    r58,  r58,  r58,  0,    0,    0,    r58,  0,    r58,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r58,  r58,  r58,  0,    r58,  r58,  r58,  r58,  r58,  r58,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*113*/ { 0,  0,    r59,  r59,  0,    0,    0,    0,    0,    0,    r59,  0,    0,    r59,  r59,  r59,  0,    0,    0,    r59,  0,    r59,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r59,  r59,  r59,  0,    r59,  r59,  r59,  r59,  r59,  r59,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*114*/ { 0,  0,    r61,  r61,  0,    0,    0,    0,    0,    0,    r61,  0,    0,    r61,  r61,  r61,  0,    0,    0,    r61,  0,    r61,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r61,  r61,  r61,  0,    r61,  r61,  r61,  r61,  r61,  r61,  r61,  r61,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*115*/ { 0,  0,    r62,  r62,  0,    0,    0,    0,    0,    0,    r62,  0,    0,    r62,  r62,  r62,  0,    0,    0,    r62,  0,    r62,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r62,  r62,  r62,  0,    r62,  r62,  r62,  r62,  r62,  r62,  r62,  r62,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*116*/ { 0,  0,    r66,  r66,  0,    0,    0,    0,    0,    0,    r66,  0,    0,    r66,  r66,  r66,  0,    0,    0,    r66,  0,    r66,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r66,  r66,  r66,  0,    r66,  r66,  r66,  r66,  r66,  r66,  r66,  r66,  r66,  r66,  r66,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*117*/ { 0,  0,    r68,  r68,  0,    0,    0,    0,    0,    0,    r68,  0,    r68,  r68,  r68,  r68,  0,    0,    0,    r68,  0,    r68,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r68,  r68,  r68,  0,    r68,  r68,  r68,  r68,  r68,  r68,  r68,  r68,  r68,  r68,  r68,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*118*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    s133, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*119*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    r41,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s134, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*120*/ { 0,  0,    r13,  r13,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*121*/ { 0,  0,    0,    0,    0,    0,    0,    0,    s55,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g135, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*122*/ { 0,  0,    r32,  r32,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*123*/ { 0,  0,    r16,  r16,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*124*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s136, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*125*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r30,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*126*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r31,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*127*/ { 0,  0,    r34,  r34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*128*/ { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    g137, g63,  g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*129*/ { 0,  0,    r42,  r42,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*130*/ { 0,  0,    r7,   r7,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*131*/ { 0,  s101, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g138, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*132*/ { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    g139, g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*133*/ { 0,  0,    r70,  r70,  0,    0,    0,    0,    0,    0,    r70,  0,    r70,  r70,  r70,  r70,  0,    0,    0,    r70,  0,    r70,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    r70,  r70,  r70,  0,    r70,  r70,  r70,  r70,  r70,  r70,  r70,  r70,  r70,  r70,  r70,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*134*/ { 0,  s32,  0,    0,    0,    0,    0,    0,    s49,  s48,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s40,  0,    0,    0,    0,    0,    0,    0,    s45,  0,    0,    0,    s33,  s34,  0,    0,    0,    0,    0,    0,    0,    0,    g140, 0,    g119, g38,  g39,  g41,  g42,  g43,  g44,  g46,  g47,  g50   },
/*135*/ { 0,  0,    r15,  r15,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*136*/ { 0,  0,    0,    0,    0,    s141, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*137*/ { 0,  0,    r21,  r21,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*138*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    r38,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*139*/ { 0,  0,    r9,   r9,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    s142, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*140*/ { 0,  0,    0,    0,    0,    0,    0,    0,    0,    0,    r40,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*141*/ { 0,  s143, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*142*/ { 0,  s144, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*143*/ { 0,  0,    r18,  r18,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     },
/*144*/ { 0,  0,    r10,  r10,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0     }
};


BytePtr Parser::ACTION( int s, Terminal a )
{
    return parsing_table[ s ][ a ];
}

int Parser::GOTO( int s, NonTerminal a )
{
    return parsing_table[ s ][ TERMINAL_SIZE + a ][ 1 ];
}

Parser::Parser()
{}


Parser::~Parser()
{}

void Parser::parse( Scanner * const scan )
{
    stack< int > *stak = new stack< int >();
    Byte ACTION_s_a;
    Byte STATE_s_a;

    stak->push( 0 );

    int s;
    int t;
    int i;
    const Token *a = scan->nextToken();

    while ( true )
    {
        s = stak->top();

        if ( a == 0 )
        {
            a = scan->nextToken();

            continue;
        }
        else if ( ACTION( s, a->name ) == 0 )
        {
            error( "syntax error.", a->line, a->Ch );

            break;
        }

        ACTION_s_a = ACTION( s, a->name )[ 0 ];
        STATE_s_a = ACTION( s, a->name )[ 1 ];

        if ( ACTION_s_a == 's' )
        {
            t = STATE_s_a;
            stak->push( t );

            delete a;
            a = scan->nextToken();
        }
        else if ( ACTION_s_a == 'r' )
        {

            for ( i = B_LEN_OF_PRODUCTION( STATE_s_a ); i >= 1; i-- )
            {
                stak->pop();
            }

            t = stak->top();
            stak->push( GOTO( t, A_OF_PRODUCTION( STATE_s_a ) ) );
            printf( "%s\n", PRODUCTION( STATE_s_a ) );
        }
        else if ( ACTION( s, a->name )[ 0 ] == 'a' )
        {
            printf( "%s\n", "accept..." );

            break;
        }
        else
        {
            error( "unknown action.", a->line, a->Ch );

            break;
        }

    }

}

/*
============================== parsing machine ==============================

state 0

  [config: 3, core config: 1]

  (0) $accept -> . <Lines>  {$end}  (core) 
  (1) <Lines> -> . Integer <Statements> NewLine <Lines>  {$end} 
  (2) <Lines> -> . Integer <Statements> NewLine  {$end} 

  Integer [261] shift 2
  <Lines> [-1] goto 1


state 1

  [config: 1, core config: 1]

  (0) $accept -> <Lines> .  {$end}  (core) 

  $end [0] Accept


state 2

  [config: 29, core config: 2]

  (2) <Lines> -> Integer . <Statements> NewLine  {$end}  (core) 
  (1) <Lines> -> Integer . <Statements> NewLine <Lines>  {$end}  (core) 
  (3) <Statements> -> . <Statement> : <Statements>  {NewLine} 
  (4) <Statements> -> . <Statement>  {NewLine} 
  (5) <Statement> -> . CLOSE # Integer  {:, NewLine} 
  (6) <Statement> -> . DATA <Constant_List>  {:, NewLine} 
  (7) <Statement> -> . DIM ID ( <Integer_List> )  {:, NewLine} 
  (8) <Statement> -> . END  {:, NewLine} 
  (9) <Statement> -> . FOR ID = <Expression> TO <Expression>  {:, NewLine} 
  (10) <Statement> -> . FOR ID = <Expression> TO <Expression> STEP Integer  {:, NewLine} 
  (11) <Statement> -> . GOTO <Expression>  {:, NewLine} 
  (12) <Statement> -> . GOSUB <Expression>  {:, NewLine} 
  (13) <Statement> -> . IF <Expression> THEN <Statement>  {:, NewLine} 
  (14) <Statement> -> . INPUT <ID_List>  {:, NewLine} 
  (15) <Statement> -> . INPUT # Integer , <ID_List>  {:, NewLine} 
  (16) <Statement> -> . LET ID = <Expression>  {:, NewLine} 
  (17) <Statement> -> . NEXT <ID_List>  {:, NewLine} 
  (18) <Statement> -> . OPEN <Value> FOR <Access> AS # Integer  {:, NewLine} 
  (19) <Statement> -> . POKE <Value_List>  {:, NewLine} 
  (20) <Statement> -> . PRINT <Print_List>  {:, NewLine} 
  (21) <Statement> -> . PRINT # Integer , <Print_List>  {:, NewLine} 
  (22) <Statement> -> . READ <ID_List>  {:, NewLine} 
  (23) <Statement> -> . RETURN  {:, NewLine} 
  (24) <Statement> -> . RESTORE  {:, NewLine} 
  (25) <Statement> -> . RUN  {:, NewLine} 
  (26) <Statement> -> . STOP  {:, NewLine} 
  (27) <Statement> -> . SYS <Value>  {:, NewLine} 
  (28) <Statement> -> . WAIT <Value_List>  {:, NewLine} 
  (29) <Statement> -> . Remark  {:, NewLine} 

  CLOSE [263] shift 5
  DATA [264] shift 6
  DIM [265] shift 7
  END [266] shift 8
  FOR [267] shift 9
  GOTO [270] shift 10
  GOSUB [271] shift 11
  IF [272] shift 12
  INPUT [274] shift 13
  LET [275] shift 14
  NEXT [276] shift 15
  OPEN [277] shift 16
  POKE [279] shift 17
  PRINT [280] shift 18
  READ [281] shift 19
  RETURN [282] shift 20
  RESTORE [283] shift 21
  RUN [284] shift 22
  STOP [285] shift 23
  SYS [286] shift 24
  WAIT [287] shift 25
  Remark [258] shift 26
  <Statements> [-2] goto 3
  <Statement> [-3] goto 4


state 3

  [config: 2, core config: 2]

  (2) <Lines> -> Integer <Statements> . NewLine  {$end}  (core) 
  (1) <Lines> -> Integer <Statements> . NewLine <Lines>  {$end}  (core) 

  NewLine [257] shift 27


state 4

  [config: 2, core config: 2]

  (4) <Statements> -> <Statement> .  {NewLine}  (core) 
  (3) <Statements> -> <Statement> . : <Statements>  {NewLine}  (core) 

  NewLine [257] reduce (4)
  : [58] shift 28


state 5

  [config: 1, core config: 1]

  (5) <Statement> -> CLOSE . # Integer  {:, NewLine}  (core) 

  # [35] shift 29


state 6

  [config: 6, core config: 1]

  (6) <Statement> -> DATA . <Constant_List>  {:, NewLine}  (core) 
  (36) <Constant_List> -> . <Constant> , <Constant_List>  {:, NewLine} 
  (37) <Constant_List> -> . <Constant>  {:, NewLine} 
  (72) <Constant> -> . Integer  {,, :, NewLine} 
  (73) <Constant> -> . String  {,, :, NewLine} 
  (74) <Constant> -> . Real  {,, :, NewLine} 

  Integer [261] shift 32
  String [260] shift 33
  Real [262] shift 34
  <Constant_List> [-7] goto 30
  <Constant> [-20] goto 31


state 7

  [config: 1, core config: 1]

  (7) <Statement> -> DIM . ID ( <Integer_List> )  {:, NewLine}  (core) 

  ID [259] shift 35


state 8

  [config: 1, core config: 1]

  (8) <Statement> -> END .  {:, NewLine}  (core) 

  . reduce (8)


state 9

  [config: 2, core config: 2]

  (9) <Statement> -> FOR . ID = <Expression> TO <Expression>  {:, NewLine}  (core) 
  (10) <Statement> -> FOR . ID = <Expression> TO <Expression> STEP Integer  {:, NewLine}  (core) 

  ID [259] shift 36


state 10

  [config: 32, core config: 1]

  (11) <Statement> -> GOTO . <Expression>  {:, NewLine}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, NewLine} 
  (45) <Expression> -> . <And_Exp>  {:, NewLine} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, NewLine, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {:, NewLine, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, AND, NewLine, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, AND, NewLine, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, AND, NewLine, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, AND, NewLine, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, AND, NewLine, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, AND, NewLine, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, AND, NewLine, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, AND, NewLine, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, AND, NewLine, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, AND, NewLine, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 37
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 11

  [config: 32, core config: 1]

  (12) <Statement> -> GOSUB . <Expression>  {:, NewLine}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, NewLine} 
  (45) <Expression> -> . <And_Exp>  {:, NewLine} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, NewLine, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {:, NewLine, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, AND, NewLine, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, AND, NewLine, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, AND, NewLine, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, AND, NewLine, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, AND, NewLine, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, AND, NewLine, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, AND, NewLine, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, AND, NewLine, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, AND, NewLine, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, AND, NewLine, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 51
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 12

  [config: 32, core config: 1]

  (13) <Statement> -> IF . <Expression> THEN <Statement>  {:, NewLine}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {THEN} 
  (45) <Expression> -> . <And_Exp>  {THEN} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {OR, THEN} 
  (47) <And_Exp> -> . <Not_Exp>  {OR, THEN} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {AND, OR, THEN} 
  (49) <Not_Exp> -> . <Compare_Exp>  {AND, OR, THEN} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {AND, OR, THEN} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {AND, OR, THEN} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {AND, OR, THEN} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {AND, OR, THEN} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {AND, OR, THEN} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {AND, OR, THEN} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {AND, OR, THEN} 
  (57) <Compare_Exp> -> . <Add_Exp>  {AND, OR, THEN} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {<, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {<, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (60) <Add_Exp> -> . <Mult_Exp>  {<, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, <, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, <, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, <, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (69) <Value> -> . ID  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (73) <Constant> -> . String  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, THEN, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 52
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 13

  [config: 4, core config: 2]

  (15) <Statement> -> INPUT . # Integer , <ID_List>  {:, NewLine}  (core) 
  (14) <Statement> -> INPUT . <ID_List>  {:, NewLine}  (core) 
  (32) <ID_List> -> . ID , <ID_List>  {:, NewLine} 
  (33) <ID_List> -> . ID  {:, NewLine} 

  # [35] shift 53
  ID [259] shift 55
  <ID_List> [-5] goto 54


state 14

  [config: 1, core config: 1]

  (16) <Statement> -> LET . ID = <Expression>  {:, NewLine}  (core) 

  ID [259] shift 56


state 15

  [config: 3, core config: 1]

  (17) <Statement> -> NEXT . <ID_List>  {:, NewLine}  (core) 
  (32) <ID_List> -> . ID , <ID_List>  {:, NewLine} 
  (33) <ID_List> -> . ID  {:, NewLine} 

  ID [259] shift 55
  <ID_List> [-5] goto 57


state 16

  [config: 8, core config: 1]

  (18) <Statement> -> OPEN . <Value> FOR <Access> AS # Integer  {:, NewLine}  (core) 
  (68) <Value> -> . ( <Expression> )  {FOR} 
  (69) <Value> -> . ID  {FOR} 
  (70) <Value> -> . ID ( <Expression_List> )  {FOR} 
  (71) <Value> -> . <Constant>  {FOR} 
  (72) <Constant> -> . Integer  {FOR} 
  (73) <Constant> -> . String  {FOR} 
  (74) <Constant> -> . Real  {FOR} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Value> [-19] goto 58
  <Constant> [-20] goto 50


state 17

  [config: 10, core config: 1]

  (19) <Statement> -> POKE . <Value_List>  {:, NewLine}  (core) 
  (34) <Value_List> -> . <Value> , <Value_List>  {:, NewLine} 
  (35) <Value_List> -> . <Value>  {:, NewLine} 
  (68) <Value> -> . ( <Expression> )  {,, :, NewLine} 
  (69) <Value> -> . ID  {,, :, NewLine} 
  (70) <Value> -> . ID ( <Expression_List> )  {,, :, NewLine} 
  (71) <Value> -> . <Constant>  {,, :, NewLine} 
  (72) <Constant> -> . Integer  {,, :, NewLine} 
  (73) <Constant> -> . String  {,, :, NewLine} 
  (74) <Constant> -> . Real  {,, :, NewLine} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Value_List> [-6] goto 59
  <Value> [-19] goto 60
  <Constant> [-20] goto 50


state 18

  [config: 35, core config: 2]

  (21) <Statement> -> PRINT . # Integer , <Print_List>  {:, NewLine}  (core) 
  (20) <Statement> -> PRINT . <Print_List>  {:, NewLine}  (core) 
  (42) <Print_List> -> . <Expression> ; <Print_List>  {:, NewLine} 
  (43) <Print_List> -> . <Expression>  {:, NewLine} 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, ;, NewLine} 
  (45) <Expression> -> . <And_Exp>  {:, ;, NewLine} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, ;, NewLine, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {:, ;, NewLine, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, ;, AND, NewLine, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 

  Integer [261] shift 32
  # [35] shift 61
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Print_List> [-10] goto 62
  <Expression> [-11] goto 63
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 19

  [config: 3, core config: 1]

  (22) <Statement> -> READ . <ID_List>  {:, NewLine}  (core) 
  (32) <ID_List> -> . ID , <ID_List>  {:, NewLine} 
  (33) <ID_List> -> . ID  {:, NewLine} 

  ID [259] shift 55
  <ID_List> [-5] goto 64


state 20

  [config: 1, core config: 1]

  (23) <Statement> -> RETURN .  {:, NewLine}  (core) 

  . reduce (23)


state 21

  [config: 1, core config: 1]

  (24) <Statement> -> RESTORE .  {:, NewLine}  (core) 

  . reduce (24)


state 22

  [config: 1, core config: 1]

  (25) <Statement> -> RUN .  {:, NewLine}  (core) 

  . reduce (25)


state 23

  [config: 1, core config: 1]

  (26) <Statement> -> STOP .  {:, NewLine}  (core) 

  . reduce (26)


state 24

  [config: 8, core config: 1]

  (27) <Statement> -> SYS . <Value>  {:, NewLine}  (core) 
  (68) <Value> -> . ( <Expression> )  {:, NewLine} 
  (69) <Value> -> . ID  {:, NewLine} 
  (70) <Value> -> . ID ( <Expression_List> )  {:, NewLine} 
  (71) <Value> -> . <Constant>  {:, NewLine} 
  (72) <Constant> -> . Integer  {:, NewLine} 
  (73) <Constant> -> . String  {:, NewLine} 
  (74) <Constant> -> . Real  {:, NewLine} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Value> [-19] goto 65
  <Constant> [-20] goto 50


state 25

  [config: 10, core config: 1]

  (28) <Statement> -> WAIT . <Value_List>  {:, NewLine}  (core) 
  (34) <Value_List> -> . <Value> , <Value_List>  {:, NewLine} 
  (35) <Value_List> -> . <Value>  {:, NewLine} 
  (68) <Value> -> . ( <Expression> )  {,, :, NewLine} 
  (69) <Value> -> . ID  {,, :, NewLine} 
  (70) <Value> -> . ID ( <Expression_List> )  {,, :, NewLine} 
  (71) <Value> -> . <Constant>  {,, :, NewLine} 
  (72) <Constant> -> . Integer  {,, :, NewLine} 
  (73) <Constant> -> . String  {,, :, NewLine} 
  (74) <Constant> -> . Real  {,, :, NewLine} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Value_List> [-6] goto 66
  <Value> [-19] goto 60
  <Constant> [-20] goto 50


state 26

  [config: 1, core config: 1]

  (29) <Statement> -> Remark .  {:, NewLine}  (core) 

  . reduce (29)


state 27

  [config: 4, core config: 2]

  (2) <Lines> -> Integer <Statements> NewLine .  {$end}  (core) 
  (1) <Lines> -> Integer <Statements> NewLine . <Lines>  {$end}  (core) 
  (1) <Lines> -> . Integer <Statements> NewLine <Lines>  {$end} 
  (2) <Lines> -> . Integer <Statements> NewLine  {$end} 

  $end [0] reduce (2)
  Integer [261] shift 2
  <Lines> [-1] goto 67


state 28

  [config: 28, core config: 1]

  (3) <Statements> -> <Statement> : . <Statements>  {NewLine}  (core) 
  (3) <Statements> -> . <Statement> : <Statements>  {NewLine} 
  (4) <Statements> -> . <Statement>  {NewLine} 
  (5) <Statement> -> . CLOSE # Integer  {:, NewLine} 
  (6) <Statement> -> . DATA <Constant_List>  {:, NewLine} 
  (7) <Statement> -> . DIM ID ( <Integer_List> )  {:, NewLine} 
  (8) <Statement> -> . END  {:, NewLine} 
  (9) <Statement> -> . FOR ID = <Expression> TO <Expression>  {:, NewLine} 
  (10) <Statement> -> . FOR ID = <Expression> TO <Expression> STEP Integer  {:, NewLine} 
  (11) <Statement> -> . GOTO <Expression>  {:, NewLine} 
  (12) <Statement> -> . GOSUB <Expression>  {:, NewLine} 
  (13) <Statement> -> . IF <Expression> THEN <Statement>  {:, NewLine} 
  (14) <Statement> -> . INPUT <ID_List>  {:, NewLine} 
  (15) <Statement> -> . INPUT # Integer , <ID_List>  {:, NewLine} 
  (16) <Statement> -> . LET ID = <Expression>  {:, NewLine} 
  (17) <Statement> -> . NEXT <ID_List>  {:, NewLine} 
  (18) <Statement> -> . OPEN <Value> FOR <Access> AS # Integer  {:, NewLine} 
  (19) <Statement> -> . POKE <Value_List>  {:, NewLine} 
  (20) <Statement> -> . PRINT <Print_List>  {:, NewLine} 
  (21) <Statement> -> . PRINT # Integer , <Print_List>  {:, NewLine} 
  (22) <Statement> -> . READ <ID_List>  {:, NewLine} 
  (23) <Statement> -> . RETURN  {:, NewLine} 
  (24) <Statement> -> . RESTORE  {:, NewLine} 
  (25) <Statement> -> . RUN  {:, NewLine} 
  (26) <Statement> -> . STOP  {:, NewLine} 
  (27) <Statement> -> . SYS <Value>  {:, NewLine} 
  (28) <Statement> -> . WAIT <Value_List>  {:, NewLine} 
  (29) <Statement> -> . Remark  {:, NewLine} 

  CLOSE [263] shift 5
  DATA [264] shift 6
  DIM [265] shift 7
  END [266] shift 8
  FOR [267] shift 9
  GOTO [270] shift 10
  GOSUB [271] shift 11
  IF [272] shift 12
  INPUT [274] shift 13
  LET [275] shift 14
  NEXT [276] shift 15
  OPEN [277] shift 16
  POKE [279] shift 17
  PRINT [280] shift 18
  READ [281] shift 19
  RETURN [282] shift 20
  RESTORE [283] shift 21
  RUN [284] shift 22
  STOP [285] shift 23
  SYS [286] shift 24
  WAIT [287] shift 25
  Remark [258] shift 26
  <Statements> [-2] goto 68
  <Statement> [-3] goto 4


state 29

  [config: 1, core config: 1]

  (5) <Statement> -> CLOSE # . Integer  {:, NewLine}  (core) 

  Integer [261] shift 69


state 30

  [config: 1, core config: 1]

  (6) <Statement> -> DATA <Constant_List> .  {:, NewLine}  (core) 

  . reduce (6)


state 31

  [config: 2, core config: 2]

  (37) <Constant_List> -> <Constant> .  {:, NewLine}  (core) 
  (36) <Constant_List> -> <Constant> . , <Constant_List>  {:, NewLine}  (core) 

  NewLine [257] reduce (37)
  : [58] reduce (37)
  , [44] shift 70


state 32

  [config: 1, core config: 1]

  (72) <Constant> -> Integer .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (72)


state 33

  [config: 1, core config: 1]

  (73) <Constant> -> String .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (73)


state 34

  [config: 1, core config: 1]

  (74) <Constant> -> Real .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (74)


state 35

  [config: 1, core config: 1]

  (7) <Statement> -> DIM ID . ( <Integer_List> )  {:, NewLine}  (core) 

  ( [40] shift 71


state 36

  [config: 2, core config: 2]

  (9) <Statement> -> FOR ID . = <Expression> TO <Expression>  {:, NewLine}  (core) 
  (10) <Statement> -> FOR ID . = <Expression> TO <Expression> STEP Integer  {:, NewLine}  (core) 

  = [61] shift 72


state 37

  [config: 1, core config: 1]

  (11) <Statement> -> GOTO <Expression> .  {:, NewLine}  (core) 

  . reduce (11)


state 38

  [config: 2, core config: 2]

  (45) <Expression> -> <And_Exp> .  {), ,, :, ;, NewLine, STEP, THEN, TO}  (core) 
  (44) <Expression> -> <And_Exp> . OR <Expression>  {), ,, :, ;, NewLine, STEP, THEN, TO}  (core) 

  NewLine [257] reduce (45)
  : [58] reduce (45)
  ) [41] reduce (45)
  TO [268] reduce (45)
  STEP [269] reduce (45)
  THEN [273] reduce (45)
  , [44] reduce (45)
  ; [59] reduce (45)
  OR [289] shift 73


state 39

  [config: 2, core config: 2]

  (47) <And_Exp> -> <Not_Exp> .  {), ,, :, ;, NewLine, OR, STEP, THEN, TO}  (core) 
  (46) <And_Exp> -> <Not_Exp> . AND <And_Exp>  {), ,, :, ;, NewLine, OR, STEP, THEN, TO}  (core) 

  NewLine [257] reduce (47)
  : [58] reduce (47)
  ) [41] reduce (47)
  TO [268] reduce (47)
  STEP [269] reduce (47)
  THEN [273] reduce (47)
  , [44] reduce (47)
  ; [59] reduce (47)
  OR [289] reduce (47)
  AND [290] shift 74


state 40

  [config: 26, core config: 1]

  (48) <Not_Exp> -> NOT . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 75
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 41

  [config: 1, core config: 1]

  (49) <Not_Exp> -> <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (49)


state 42

  [config: 8, core config: 8]

  (57) <Compare_Exp> -> <Add_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (55) <Compare_Exp> -> <Add_Exp> . < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (56) <Compare_Exp> -> <Add_Exp> . <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (51) <Compare_Exp> -> <Add_Exp> . <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> <Add_Exp> . = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (53) <Compare_Exp> -> <Add_Exp> . > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (52) <Compare_Exp> -> <Add_Exp> . >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (54) <Compare_Exp> -> <Add_Exp> . >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  NewLine [257] reduce (57)
  : [58] reduce (57)
  ) [41] reduce (57)
  = [61] shift 79
  TO [268] reduce (57)
  STEP [269] reduce (57)
  THEN [273] reduce (57)
  , [44] reduce (57)
  ; [59] reduce (57)
  OR [289] reduce (57)
  AND [290] reduce (57)
  <> [292] shift 78
  >< [293] shift 81
  > [62] shift 80
  >= [294] shift 82
  < [60] shift 76
  <= [295] shift 77


state 43

  [config: 3, core config: 3]

  (60) <Add_Exp> -> <Mult_Exp> .  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (58) <Add_Exp> -> <Mult_Exp> . + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (59) <Add_Exp> -> <Mult_Exp> . - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  NewLine [257] reduce (60)
  : [58] reduce (60)
  ) [41] reduce (60)
  = [61] reduce (60)
  TO [268] reduce (60)
  STEP [269] reduce (60)
  THEN [273] reduce (60)
  , [44] reduce (60)
  ; [59] reduce (60)
  OR [289] reduce (60)
  AND [290] reduce (60)
  <> [292] reduce (60)
  >< [293] reduce (60)
  > [62] reduce (60)
  >= [294] reduce (60)
  < [60] reduce (60)
  <= [295] reduce (60)
  + [43] shift 83
  - [45] shift 84


state 44

  [config: 3, core config: 3]

  (63) <Mult_Exp> -> <Negate_Exp> .  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (61) <Mult_Exp> -> <Negate_Exp> . * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (62) <Mult_Exp> -> <Negate_Exp> . / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  NewLine [257] reduce (63)
  : [58] reduce (63)
  ) [41] reduce (63)
  = [61] reduce (63)
  TO [268] reduce (63)
  STEP [269] reduce (63)
  THEN [273] reduce (63)
  , [44] reduce (63)
  ; [59] reduce (63)
  OR [289] reduce (63)
  AND [290] reduce (63)
  <> [292] reduce (63)
  >< [293] reduce (63)
  > [62] reduce (63)
  >= [294] reduce (63)
  < [60] reduce (63)
  <= [295] reduce (63)
  + [43] reduce (63)
  - [45] reduce (63)
  * [42] shift 85
  / [47] shift 86


state 45

  [config: 10, core config: 1]

  (64) <Negate_Exp> -> - . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Power_Exp> [-18] goto 87
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 46

  [config: 2, core config: 2]

  (65) <Negate_Exp> -> <Power_Exp> .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (66) <Power_Exp> -> <Power_Exp> . ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  NewLine [257] reduce (65)
  : [58] reduce (65)
  ) [41] reduce (65)
  = [61] reduce (65)
  TO [268] reduce (65)
  STEP [269] reduce (65)
  THEN [273] reduce (65)
  , [44] reduce (65)
  ; [59] reduce (65)
  OR [289] reduce (65)
  AND [290] reduce (65)
  <> [292] reduce (65)
  >< [293] reduce (65)
  > [62] reduce (65)
  >= [294] reduce (65)
  < [60] reduce (65)
  <= [295] reduce (65)
  + [43] reduce (65)
  - [45] reduce (65)
  * [42] reduce (65)
  / [47] reduce (65)
  ^ [94] shift 88


state 47

  [config: 1, core config: 1]

  (67) <Power_Exp> -> <Value> .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (67)


state 48

  [config: 32, core config: 1]

  (68) <Value> -> ( . <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {)} 
  (45) <Expression> -> . <And_Exp>  {)} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {), OR} 
  (47) <And_Exp> -> . <Not_Exp>  {), OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {), AND, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {), AND, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), AND, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), AND, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), AND, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), AND, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), AND, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), AND, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), AND, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), AND, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), <, <=, <>, =, >, ><, >=, AND, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), <, <=, <>, =, >, ><, >=, AND, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), <, <=, <>, =, >, ><, >=, AND, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (69) <Value> -> . ID  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (71) <Value> -> . <Constant>  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (72) <Constant> -> . Integer  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (73) <Constant> -> . String  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (74) <Constant> -> . Real  {), *, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 89
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 49

  [config: 2, core config: 2]

  (69) <Value> -> ID .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 
  (70) <Value> -> ID . ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  NewLine [257] reduce (69)
  : [58] reduce (69)
  ( [40] shift 90
  ) [41] reduce (69)
  FOR [267] reduce (69)
  = [61] reduce (69)
  TO [268] reduce (69)
  STEP [269] reduce (69)
  THEN [273] reduce (69)
  , [44] reduce (69)
  ; [59] reduce (69)
  OR [289] reduce (69)
  AND [290] reduce (69)
  <> [292] reduce (69)
  >< [293] reduce (69)
  > [62] reduce (69)
  >= [294] reduce (69)
  < [60] reduce (69)
  <= [295] reduce (69)
  + [43] reduce (69)
  - [45] reduce (69)
  * [42] reduce (69)
  / [47] reduce (69)
  ^ [94] reduce (69)


state 50

  [config: 1, core config: 1]

  (71) <Value> -> <Constant> .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (71)


state 51

  [config: 1, core config: 1]

  (12) <Statement> -> GOSUB <Expression> .  {:, NewLine}  (core) 

  . reduce (12)


state 52

  [config: 1, core config: 1]

  (13) <Statement> -> IF <Expression> . THEN <Statement>  {:, NewLine}  (core) 

  THEN [273] shift 91


state 53

  [config: 1, core config: 1]

  (15) <Statement> -> INPUT # . Integer , <ID_List>  {:, NewLine}  (core) 

  Integer [261] shift 92


state 54

  [config: 1, core config: 1]

  (14) <Statement> -> INPUT <ID_List> .  {:, NewLine}  (core) 

  . reduce (14)


state 55

  [config: 2, core config: 2]

  (33) <ID_List> -> ID .  {:, NewLine}  (core) 
  (32) <ID_List> -> ID . , <ID_List>  {:, NewLine}  (core) 

  NewLine [257] reduce (33)
  : [58] reduce (33)
  , [44] shift 93


state 56

  [config: 1, core config: 1]

  (16) <Statement> -> LET ID . = <Expression>  {:, NewLine}  (core) 

  = [61] shift 94


state 57

  [config: 1, core config: 1]

  (17) <Statement> -> NEXT <ID_List> .  {:, NewLine}  (core) 

  . reduce (17)


state 58

  [config: 1, core config: 1]

  (18) <Statement> -> OPEN <Value> . FOR <Access> AS # Integer  {:, NewLine}  (core) 

  FOR [267] shift 95


state 59

  [config: 1, core config: 1]

  (19) <Statement> -> POKE <Value_List> .  {:, NewLine}  (core) 

  . reduce (19)


state 60

  [config: 2, core config: 2]

  (35) <Value_List> -> <Value> .  {:, NewLine}  (core) 
  (34) <Value_List> -> <Value> . , <Value_List>  {:, NewLine}  (core) 

  NewLine [257] reduce (35)
  : [58] reduce (35)
  , [44] shift 96


state 61

  [config: 1, core config: 1]

  (21) <Statement> -> PRINT # . Integer , <Print_List>  {:, NewLine}  (core) 

  Integer [261] shift 97


state 62

  [config: 1, core config: 1]

  (20) <Statement> -> PRINT <Print_List> .  {:, NewLine}  (core) 

  . reduce (20)


state 63

  [config: 2, core config: 2]

  (43) <Print_List> -> <Expression> .  {:, NewLine}  (core) 
  (42) <Print_List> -> <Expression> . ; <Print_List>  {:, NewLine}  (core) 

  NewLine [257] reduce (43)
  : [58] reduce (43)
  ; [59] shift 98


state 64

  [config: 1, core config: 1]

  (22) <Statement> -> READ <ID_List> .  {:, NewLine}  (core) 

  . reduce (22)


state 65

  [config: 1, core config: 1]

  (27) <Statement> -> SYS <Value> .  {:, NewLine}  (core) 

  . reduce (27)


state 66

  [config: 1, core config: 1]

  (28) <Statement> -> WAIT <Value_List> .  {:, NewLine}  (core) 

  . reduce (28)


state 67

  [config: 1, core config: 1]

  (1) <Lines> -> Integer <Statements> NewLine <Lines> .  {$end}  (core) 

  . reduce (1)


state 68

  [config: 1, core config: 1]

  (3) <Statements> -> <Statement> : <Statements> .  {NewLine}  (core) 

  . reduce (3)


state 69

  [config: 1, core config: 1]

  (5) <Statement> -> CLOSE # Integer .  {:, NewLine}  (core) 

  . reduce (5)


state 70

  [config: 6, core config: 1]

  (36) <Constant_List> -> <Constant> , . <Constant_List>  {:, NewLine}  (core) 
  (36) <Constant_List> -> . <Constant> , <Constant_List>  {:, NewLine} 
  (37) <Constant_List> -> . <Constant>  {:, NewLine} 
  (72) <Constant> -> . Integer  {,, :, NewLine} 
  (73) <Constant> -> . String  {,, :, NewLine} 
  (74) <Constant> -> . Real  {,, :, NewLine} 

  Integer [261] shift 32
  String [260] shift 33
  Real [262] shift 34
  <Constant_List> [-7] goto 99
  <Constant> [-20] goto 31


state 71

  [config: 3, core config: 1]

  (7) <Statement> -> DIM ID ( . <Integer_List> )  {:, NewLine}  (core) 
  (38) <Integer_List> -> . Integer , <Integer_List>  {)} 
  (39) <Integer_List> -> . Integer  {)} 

  Integer [261] shift 101
  <Integer_List> [-8] goto 100


state 72

  [config: 33, core config: 2]

  (9) <Statement> -> FOR ID = . <Expression> TO <Expression>  {:, NewLine}  (core) 
  (10) <Statement> -> FOR ID = . <Expression> TO <Expression> STEP Integer  {:, NewLine}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {TO} 
  (45) <Expression> -> . <And_Exp>  {TO} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {OR, TO} 
  (47) <And_Exp> -> . <Not_Exp>  {OR, TO} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {AND, OR, TO} 
  (49) <Not_Exp> -> . <Compare_Exp>  {AND, OR, TO} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {AND, OR, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {AND, OR, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {AND, OR, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {AND, OR, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {AND, OR, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {AND, OR, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {AND, OR, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {AND, OR, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {<, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {<, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {<, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, <, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, <, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, <, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (69) <Value> -> . ID  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (73) <Constant> -> . String  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, <, <=, <>, =, >, ><, >=, AND, OR, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 102
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 73

  [config: 32, core config: 1]

  (44) <Expression> -> <And_Exp> OR . <Expression>  {), ,, :, ;, NewLine, STEP, THEN, TO}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {), ,, :, ;, NewLine, STEP, THEN, TO} 
  (45) <Expression> -> . <And_Exp>  {), ,, :, ;, NewLine, STEP, THEN, TO} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {), ,, :, ;, NewLine, OR, STEP, THEN, TO} 
  (47) <And_Exp> -> . <Not_Exp>  {), ,, :, ;, NewLine, OR, STEP, THEN, TO} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (49) <Not_Exp> -> . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 103
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 74

  [config: 30, core config: 1]

  (46) <And_Exp> -> <Not_Exp> AND . <And_Exp>  {), ,, :, ;, NewLine, OR, STEP, THEN, TO}  (core) 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {), ,, :, ;, NewLine, OR, STEP, THEN, TO} 
  (47) <And_Exp> -> . <Not_Exp>  {), ,, :, ;, NewLine, OR, STEP, THEN, TO} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (49) <Not_Exp> -> . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <And_Exp> [-12] goto 104
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 75

  [config: 1, core config: 1]

  (48) <Not_Exp> -> NOT <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (48)


state 76

  [config: 26, core config: 1]

  (55) <Compare_Exp> -> <Add_Exp> < . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 105
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 77

  [config: 26, core config: 1]

  (56) <Compare_Exp> -> <Add_Exp> <= . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 106
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 78

  [config: 26, core config: 1]

  (51) <Compare_Exp> -> <Add_Exp> <> . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 107
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 79

  [config: 26, core config: 1]

  (50) <Compare_Exp> -> <Add_Exp> = . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 108
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 80

  [config: 26, core config: 1]

  (53) <Compare_Exp> -> <Add_Exp> > . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 109
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 81

  [config: 26, core config: 1]

  (52) <Compare_Exp> -> <Add_Exp> >< . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 110
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 82

  [config: 26, core config: 1]

  (54) <Compare_Exp> -> <Add_Exp> >= . <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Compare_Exp> [-14] goto 111
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 83

  [config: 18, core config: 1]

  (58) <Add_Exp> -> <Mult_Exp> + . <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Add_Exp> [-15] goto 112
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 84

  [config: 18, core config: 1]

  (59) <Add_Exp> -> <Mult_Exp> - . <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Add_Exp> [-15] goto 113
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 85

  [config: 15, core config: 1]

  (61) <Mult_Exp> -> <Negate_Exp> * . <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Mult_Exp> [-16] goto 114
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 86

  [config: 15, core config: 1]

  (62) <Mult_Exp> -> <Negate_Exp> / . <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Mult_Exp> [-16] goto 115
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 87

  [config: 2, core config: 2]

  (64) <Negate_Exp> -> - <Power_Exp> .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 
  (66) <Power_Exp> -> <Power_Exp> . ^ <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  NewLine [257] reduce (64)
  : [58] reduce (64)
  ) [41] reduce (64)
  = [61] reduce (64)
  TO [268] reduce (64)
  STEP [269] reduce (64)
  THEN [273] reduce (64)
  , [44] reduce (64)
  ; [59] reduce (64)
  OR [289] reduce (64)
  AND [290] reduce (64)
  <> [292] reduce (64)
  >< [293] reduce (64)
  > [62] reduce (64)
  >= [294] reduce (64)
  < [60] reduce (64)
  <= [295] reduce (64)
  + [43] reduce (64)
  - [45] reduce (64)
  * [42] reduce (64)
  / [47] reduce (64)
  ^ [94] shift 88


state 88

  [config: 8, core config: 1]

  (66) <Power_Exp> -> <Power_Exp> ^ . <Value>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^}  (core) 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Value> [-19] goto 116
  <Constant> [-20] goto 50


state 89

  [config: 1, core config: 1]

  (68) <Value> -> ( <Expression> . )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  ) [41] shift 117


state 90

  [config: 34, core config: 1]

  (70) <Value> -> ID ( . <Expression_List> )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 
  (40) <Expression_List> -> . <Expression> , <Expression_List>  {)} 
  (41) <Expression_List> -> . <Expression>  {)} 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {), ,} 
  (45) <Expression> -> . <And_Exp>  {), ,} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {), ,, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {), ,, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {), ,, AND, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {), ,, AND, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, AND, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, AND, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, AND, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, AND, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, AND, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, AND, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, AND, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, AND, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, <, <=, <>, =, >, ><, >=, AND, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, <, <=, <>, =, >, ><, >=, AND, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, <, <=, <>, =, >, ><, >=, AND, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression_List> [-9] goto 118
  <Expression> [-11] goto 119
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 91

  [config: 26, core config: 1]

  (13) <Statement> -> IF <Expression> THEN . <Statement>  {:, NewLine}  (core) 
  (5) <Statement> -> . CLOSE # Integer  {:, NewLine} 
  (6) <Statement> -> . DATA <Constant_List>  {:, NewLine} 
  (7) <Statement> -> . DIM ID ( <Integer_List> )  {:, NewLine} 
  (8) <Statement> -> . END  {:, NewLine} 
  (9) <Statement> -> . FOR ID = <Expression> TO <Expression>  {:, NewLine} 
  (10) <Statement> -> . FOR ID = <Expression> TO <Expression> STEP Integer  {:, NewLine} 
  (11) <Statement> -> . GOTO <Expression>  {:, NewLine} 
  (12) <Statement> -> . GOSUB <Expression>  {:, NewLine} 
  (13) <Statement> -> . IF <Expression> THEN <Statement>  {:, NewLine} 
  (14) <Statement> -> . INPUT <ID_List>  {:, NewLine} 
  (15) <Statement> -> . INPUT # Integer , <ID_List>  {:, NewLine} 
  (16) <Statement> -> . LET ID = <Expression>  {:, NewLine} 
  (17) <Statement> -> . NEXT <ID_List>  {:, NewLine} 
  (18) <Statement> -> . OPEN <Value> FOR <Access> AS # Integer  {:, NewLine} 
  (19) <Statement> -> . POKE <Value_List>  {:, NewLine} 
  (20) <Statement> -> . PRINT <Print_List>  {:, NewLine} 
  (21) <Statement> -> . PRINT # Integer , <Print_List>  {:, NewLine} 
  (22) <Statement> -> . READ <ID_List>  {:, NewLine} 
  (23) <Statement> -> . RETURN  {:, NewLine} 
  (24) <Statement> -> . RESTORE  {:, NewLine} 
  (25) <Statement> -> . RUN  {:, NewLine} 
  (26) <Statement> -> . STOP  {:, NewLine} 
  (27) <Statement> -> . SYS <Value>  {:, NewLine} 
  (28) <Statement> -> . WAIT <Value_List>  {:, NewLine} 
  (29) <Statement> -> . Remark  {:, NewLine} 

  CLOSE [263] shift 5
  DATA [264] shift 6
  DIM [265] shift 7
  END [266] shift 8
  FOR [267] shift 9
  GOTO [270] shift 10
  GOSUB [271] shift 11
  IF [272] shift 12
  INPUT [274] shift 13
  LET [275] shift 14
  NEXT [276] shift 15
  OPEN [277] shift 16
  POKE [279] shift 17
  PRINT [280] shift 18
  READ [281] shift 19
  RETURN [282] shift 20
  RESTORE [283] shift 21
  RUN [284] shift 22
  STOP [285] shift 23
  SYS [286] shift 24
  WAIT [287] shift 25
  Remark [258] shift 26
  <Statement> [-3] goto 120


state 92

  [config: 1, core config: 1]

  (15) <Statement> -> INPUT # Integer . , <ID_List>  {:, NewLine}  (core) 

  , [44] shift 121


state 93

  [config: 3, core config: 1]

  (32) <ID_List> -> ID , . <ID_List>  {:, NewLine}  (core) 
  (32) <ID_List> -> . ID , <ID_List>  {:, NewLine} 
  (33) <ID_List> -> . ID  {:, NewLine} 

  ID [259] shift 55
  <ID_List> [-5] goto 122


state 94

  [config: 32, core config: 1]

  (16) <Statement> -> LET ID = . <Expression>  {:, NewLine}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, NewLine} 
  (45) <Expression> -> . <And_Exp>  {:, NewLine} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, NewLine, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {:, NewLine, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, AND, NewLine, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, AND, NewLine, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, AND, NewLine, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, AND, NewLine, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, AND, NewLine, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, AND, NewLine, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, AND, NewLine, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, AND, NewLine, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, AND, NewLine, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, AND, NewLine, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 123
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 95

  [config: 3, core config: 1]

  (18) <Statement> -> OPEN <Value> FOR . <Access> AS # Integer  {:, NewLine}  (core) 
  (30) <Access> -> . INPUT  {AS} 
  (31) <Access> -> . OUTPUT  {AS} 

  INPUT [274] shift 125
  OUTPUT [288] shift 126
  <Access> [-4] goto 124


state 96

  [config: 10, core config: 1]

  (34) <Value_List> -> <Value> , . <Value_List>  {:, NewLine}  (core) 
  (34) <Value_List> -> . <Value> , <Value_List>  {:, NewLine} 
  (35) <Value_List> -> . <Value>  {:, NewLine} 
  (68) <Value> -> . ( <Expression> )  {,, :, NewLine} 
  (69) <Value> -> . ID  {,, :, NewLine} 
  (70) <Value> -> . ID ( <Expression_List> )  {,, :, NewLine} 
  (71) <Value> -> . <Constant>  {,, :, NewLine} 
  (72) <Constant> -> . Integer  {,, :, NewLine} 
  (73) <Constant> -> . String  {,, :, NewLine} 
  (74) <Constant> -> . Real  {,, :, NewLine} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  String [260] shift 33
  Real [262] shift 34
  <Value_List> [-6] goto 127
  <Value> [-19] goto 60
  <Constant> [-20] goto 50


state 97

  [config: 1, core config: 1]

  (21) <Statement> -> PRINT # Integer . , <Print_List>  {:, NewLine}  (core) 

  , [44] shift 128


state 98

  [config: 34, core config: 1]

  (42) <Print_List> -> <Expression> ; . <Print_List>  {:, NewLine}  (core) 
  (42) <Print_List> -> . <Expression> ; <Print_List>  {:, NewLine} 
  (43) <Print_List> -> . <Expression>  {:, NewLine} 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, ;, NewLine} 
  (45) <Expression> -> . <And_Exp>  {:, ;, NewLine} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, ;, NewLine, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {:, ;, NewLine, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, ;, AND, NewLine, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Print_List> [-10] goto 129
  <Expression> [-11] goto 63
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 99

  [config: 1, core config: 1]

  (36) <Constant_List> -> <Constant> , <Constant_List> .  {:, NewLine}  (core) 

  . reduce (36)


state 100

  [config: 1, core config: 1]

  (7) <Statement> -> DIM ID ( <Integer_List> . )  {:, NewLine}  (core) 

  ) [41] shift 130


state 101

  [config: 2, core config: 2]

  (39) <Integer_List> -> Integer .  {)}  (core) 
  (38) <Integer_List> -> Integer . , <Integer_List>  {)}  (core) 

  ) [41] reduce (39)
  , [44] shift 131


state 102

  [config: 2, core config: 2]

  (9) <Statement> -> FOR ID = <Expression> . TO <Expression>  {:, NewLine}  (core) 
  (10) <Statement> -> FOR ID = <Expression> . TO <Expression> STEP Integer  {:, NewLine}  (core) 

  TO [268] shift 132


state 103

  [config: 1, core config: 1]

  (44) <Expression> -> <And_Exp> OR <Expression> .  {), ,, :, ;, NewLine, STEP, THEN, TO}  (core) 

  . reduce (44)


state 104

  [config: 1, core config: 1]

  (46) <And_Exp> -> <Not_Exp> AND <And_Exp> .  {), ,, :, ;, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (46)


state 105

  [config: 1, core config: 1]

  (55) <Compare_Exp> -> <Add_Exp> < <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (55)


state 106

  [config: 1, core config: 1]

  (56) <Compare_Exp> -> <Add_Exp> <= <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (56)


state 107

  [config: 1, core config: 1]

  (51) <Compare_Exp> -> <Add_Exp> <> <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (51)


state 108

  [config: 1, core config: 1]

  (50) <Compare_Exp> -> <Add_Exp> = <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (50)


state 109

  [config: 1, core config: 1]

  (53) <Compare_Exp> -> <Add_Exp> > <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (53)


state 110

  [config: 1, core config: 1]

  (52) <Compare_Exp> -> <Add_Exp> >< <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (52)


state 111

  [config: 1, core config: 1]

  (54) <Compare_Exp> -> <Add_Exp> >= <Compare_Exp> .  {), ,, :, ;, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (54)


state 112

  [config: 1, core config: 1]

  (58) <Add_Exp> -> <Mult_Exp> + <Add_Exp> .  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (58)


state 113

  [config: 1, core config: 1]

  (59) <Add_Exp> -> <Mult_Exp> - <Add_Exp> .  {), ,, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (59)


state 114

  [config: 1, core config: 1]

  (61) <Mult_Exp> -> <Negate_Exp> * <Mult_Exp> .  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (61)


state 115

  [config: 1, core config: 1]

  (62) <Mult_Exp> -> <Negate_Exp> / <Mult_Exp> .  {), +, ,, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO}  (core) 

  . reduce (62)


state 116

  [config: 1, core config: 1]

  (66) <Power_Exp> -> <Power_Exp> ^ <Value> .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (66)


state 117

  [config: 1, core config: 1]

  (68) <Value> -> ( <Expression> ) .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (68)


state 118

  [config: 1, core config: 1]

  (70) <Value> -> ID ( <Expression_List> . )  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  ) [41] shift 133


state 119

  [config: 2, core config: 2]

  (41) <Expression_List> -> <Expression> .  {)}  (core) 
  (40) <Expression_List> -> <Expression> . , <Expression_List>  {)}  (core) 

  ) [41] reduce (41)
  , [44] shift 134


state 120

  [config: 1, core config: 1]

  (13) <Statement> -> IF <Expression> THEN <Statement> .  {:, NewLine}  (core) 

  . reduce (13)


state 121

  [config: 3, core config: 1]

  (15) <Statement> -> INPUT # Integer , . <ID_List>  {:, NewLine}  (core) 
  (32) <ID_List> -> . ID , <ID_List>  {:, NewLine} 
  (33) <ID_List> -> . ID  {:, NewLine} 

  ID [259] shift 55
  <ID_List> [-5] goto 135


state 122

  [config: 1, core config: 1]

  (32) <ID_List> -> ID , <ID_List> .  {:, NewLine}  (core) 

  . reduce (32)


state 123

  [config: 1, core config: 1]

  (16) <Statement> -> LET ID = <Expression> .  {:, NewLine}  (core) 

  . reduce (16)


state 124

  [config: 1, core config: 1]

  (18) <Statement> -> OPEN <Value> FOR <Access> . AS # Integer  {:, NewLine}  (core) 

  AS [278] shift 136


state 125

  [config: 1, core config: 1]

  (30) <Access> -> INPUT .  {AS}  (core) 

  . reduce (30)


state 126

  [config: 1, core config: 1]

  (31) <Access> -> OUTPUT .  {AS}  (core) 

  . reduce (31)


state 127

  [config: 1, core config: 1]

  (34) <Value_List> -> <Value> , <Value_List> .  {:, NewLine}  (core) 

  . reduce (34)


state 128

  [config: 34, core config: 1]

  (21) <Statement> -> PRINT # Integer , . <Print_List>  {:, NewLine}  (core) 
  (42) <Print_List> -> . <Expression> ; <Print_List>  {:, NewLine} 
  (43) <Print_List> -> . <Expression>  {:, NewLine} 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, ;, NewLine} 
  (45) <Expression> -> . <And_Exp>  {:, ;, NewLine} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, ;, NewLine, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {:, ;, NewLine, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, ;, AND, NewLine, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, ;, AND, NewLine, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Print_List> [-10] goto 137
  <Expression> [-11] goto 63
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 129

  [config: 1, core config: 1]

  (42) <Print_List> -> <Expression> ; <Print_List> .  {:, NewLine}  (core) 

  . reduce (42)


state 130

  [config: 1, core config: 1]

  (7) <Statement> -> DIM ID ( <Integer_List> ) .  {:, NewLine}  (core) 

  . reduce (7)


state 131

  [config: 3, core config: 1]

  (38) <Integer_List> -> Integer , . <Integer_List>  {)}  (core) 
  (38) <Integer_List> -> . Integer , <Integer_List>  {)} 
  (39) <Integer_List> -> . Integer  {)} 

  Integer [261] shift 101
  <Integer_List> [-8] goto 138


state 132

  [config: 33, core config: 2]

  (9) <Statement> -> FOR ID = <Expression> TO . <Expression>  {:, NewLine}  (core) 
  (10) <Statement> -> FOR ID = <Expression> TO . <Expression> STEP Integer  {:, NewLine}  (core) 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {:, NewLine, STEP} 
  (45) <Expression> -> . <And_Exp>  {:, NewLine, STEP} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {:, NewLine, OR, STEP} 
  (47) <And_Exp> -> . <Not_Exp>  {:, NewLine, OR, STEP} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (49) <Not_Exp> -> . <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {:, AND, NewLine, OR, STEP} 
  (57) <Compare_Exp> -> . <Add_Exp>  {:, AND, NewLine, OR, STEP} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (60) <Add_Exp> -> . <Mult_Exp>  {:, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {+, -, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (65) <Negate_Exp> -> . <Power_Exp>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (67) <Power_Exp> -> . <Value>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (68) <Value> -> . ( <Expression> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (69) <Value> -> . ID  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (71) <Value> -> . <Constant>  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (72) <Constant> -> . Integer  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (73) <Constant> -> . String  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 
  (74) <Constant> -> . Real  {*, +, -, /, :, <, <=, <>, =, >, ><, >=, AND, NewLine, OR, STEP, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression> [-11] goto 139
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 133

  [config: 1, core config: 1]

  (70) <Value> -> ID ( <Expression_List> ) .  {), *, +, ,, -, /, :, ;, <, <=, <>, =, >, ><, >=, AND, FOR, NewLine, OR, STEP, THEN, TO, ^}  (core) 

  . reduce (70)


state 134

  [config: 34, core config: 1]

  (40) <Expression_List> -> <Expression> , . <Expression_List>  {)}  (core) 
  (40) <Expression_List> -> . <Expression> , <Expression_List>  {)} 
  (41) <Expression_List> -> . <Expression>  {)} 
  (44) <Expression> -> . <And_Exp> OR <Expression>  {), ,} 
  (45) <Expression> -> . <And_Exp>  {), ,} 
  (46) <And_Exp> -> . <Not_Exp> AND <And_Exp>  {), ,, OR} 
  (47) <And_Exp> -> . <Not_Exp>  {), ,, OR} 
  (48) <Not_Exp> -> . NOT <Compare_Exp>  {), ,, AND, OR} 
  (49) <Not_Exp> -> . <Compare_Exp>  {), ,, AND, OR} 
  (50) <Compare_Exp> -> . <Add_Exp> = <Compare_Exp>  {), ,, AND, OR} 
  (51) <Compare_Exp> -> . <Add_Exp> <> <Compare_Exp>  {), ,, AND, OR} 
  (52) <Compare_Exp> -> . <Add_Exp> >< <Compare_Exp>  {), ,, AND, OR} 
  (53) <Compare_Exp> -> . <Add_Exp> > <Compare_Exp>  {), ,, AND, OR} 
  (54) <Compare_Exp> -> . <Add_Exp> >= <Compare_Exp>  {), ,, AND, OR} 
  (55) <Compare_Exp> -> . <Add_Exp> < <Compare_Exp>  {), ,, AND, OR} 
  (56) <Compare_Exp> -> . <Add_Exp> <= <Compare_Exp>  {), ,, AND, OR} 
  (57) <Compare_Exp> -> . <Add_Exp>  {), ,, AND, OR} 
  (58) <Add_Exp> -> . <Mult_Exp> + <Add_Exp>  {), ,, <, <=, <>, =, >, ><, >=, AND, OR} 
  (59) <Add_Exp> -> . <Mult_Exp> - <Add_Exp>  {), ,, <, <=, <>, =, >, ><, >=, AND, OR} 
  (60) <Add_Exp> -> . <Mult_Exp>  {), ,, <, <=, <>, =, >, ><, >=, AND, OR} 
  (61) <Mult_Exp> -> . <Negate_Exp> * <Mult_Exp>  {), +, ,, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (62) <Mult_Exp> -> . <Negate_Exp> / <Mult_Exp>  {), +, ,, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (63) <Mult_Exp> -> . <Negate_Exp>  {), +, ,, -, <, <=, <>, =, >, ><, >=, AND, OR} 
  (64) <Negate_Exp> -> . - <Power_Exp>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR} 
  (65) <Negate_Exp> -> . <Power_Exp>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR} 
  (66) <Power_Exp> -> . <Power_Exp> ^ <Value>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (67) <Power_Exp> -> . <Value>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (68) <Value> -> . ( <Expression> )  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (69) <Value> -> . ID  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (70) <Value> -> . ID ( <Expression_List> )  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (71) <Value> -> . <Constant>  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (72) <Constant> -> . Integer  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (73) <Constant> -> . String  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 
  (74) <Constant> -> . Real  {), *, +, ,, -, /, <, <=, <>, =, >, ><, >=, AND, OR, ^} 

  Integer [261] shift 32
  ID [259] shift 49
  ( [40] shift 48
  NOT [291] shift 40
  - [45] shift 45
  String [260] shift 33
  Real [262] shift 34
  <Expression_List> [-9] goto 140
  <Expression> [-11] goto 119
  <And_Exp> [-12] goto 38
  <Not_Exp> [-13] goto 39
  <Compare_Exp> [-14] goto 41
  <Add_Exp> [-15] goto 42
  <Mult_Exp> [-16] goto 43
  <Negate_Exp> [-17] goto 44
  <Power_Exp> [-18] goto 46
  <Value> [-19] goto 47
  <Constant> [-20] goto 50


state 135

  [config: 1, core config: 1]

  (15) <Statement> -> INPUT # Integer , <ID_List> .  {:, NewLine}  (core) 

  . reduce (15)


state 136

  [config: 1, core config: 1]

  (18) <Statement> -> OPEN <Value> FOR <Access> AS . # Integer  {:, NewLine}  (core) 

  # [35] shift 141


state 137

  [config: 1, core config: 1]

  (21) <Statement> -> PRINT # Integer , <Print_List> .  {:, NewLine}  (core) 

  . reduce (21)


state 138

  [config: 1, core config: 1]

  (38) <Integer_List> -> Integer , <Integer_List> .  {)}  (core) 

  . reduce (38)


state 139

  [config: 2, core config: 2]

  (9) <Statement> -> FOR ID = <Expression> TO <Expression> .  {:, NewLine}  (core) 
  (10) <Statement> -> FOR ID = <Expression> TO <Expression> . STEP Integer  {:, NewLine}  (core) 

  NewLine [257] reduce (9)
  : [58] reduce (9)
  STEP [269] shift 142


state 140

  [config: 1, core config: 1]

  (40) <Expression_List> -> <Expression> , <Expression_List> .  {)}  (core) 

  . reduce (40)


state 141

  [config: 1, core config: 1]

  (18) <Statement> -> OPEN <Value> FOR <Access> AS # . Integer  {:, NewLine}  (core) 

  Integer [261] shift 143


state 142

  [config: 1, core config: 1]

  (10) <Statement> -> FOR ID = <Expression> TO <Expression> STEP . Integer  {:, NewLine}  (core) 

  Integer [261] shift 144


state 143

  [config: 1, core config: 1]

  (18) <Statement> -> OPEN <Value> FOR <Access> AS # Integer .  {:, NewLine}  (core) 

  . reduce (18)


state 144

  [config: 1, core config: 1]

  (10) <Statement> -> FOR ID = <Expression> TO <Expression> STEP Integer .  {:, NewLine}  (core) 

  . reduce (10)

*/

